package com.example.hackathon;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.hackathon.Transaction;
import com.example.hackathon.UserRepository;
import com.google.gson.Gson;


@Controller    // This means that this class is a Controller
 // This means URL's start with /demo (after Application path)
public class MyController {
	
	
	Transaction t;
	Transaction t1;
	TTSWatson tts=new TTSWatson();
	 String json="";
	
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@RequestMapping(path="/demo/transactionview",method=RequestMethod.GET)
	public String transactionview() {
	return "transactionview";
}

	 @RequestMapping(value="/demo/transactionview")
	 @ResponseBody
	 public String addNewUser(@RequestParam("pan") String pan,@RequestParam("billamt1") String billamt1,@RequestParam("amtpaid") String amtpaid,Model model) {
		json="";
		Long    pan1=Long.valueOf(pan);
		Integer billamt=Integer.valueOf(billamt1);
		Integer billpd=Integer.valueOf(amtpaid);
		Integer pointfetched;
		Integer pointsgiven;
		Integer valuefetched;
		Integer valuegiven;
		Integer valuetobepaid;
		String message="";
		
		try {
		      t = userRepository.findBypan(pan1);
		      
		      pointfetched=t.getpoints();
		      valuefetched=t.getvalue();
		      
		      if(billamt.intValue()==billpd.intValue())
		      {     
		    	    pointsgiven=(Integer)((billamt/100)*5);
		    	    valuegiven=(Integer)((pointsgiven/10));
		    	    pointfetched=pointfetched + pointsgiven;
			        valuefetched=valuefetched+valuegiven;
		    	    t.setpoints(pointfetched);
					t.setvalue(valuefetched);
					userRepository.save(t);
		    	    message="Your transaction has been completed successfully";
		    	    
		    	    model.addAttribute("message",message);
		    	    model.addAttribute("message1","alert alert-info");
		      }
		      
		      if(billpd.intValue()<billamt.intValue())
		      {valuetobepaid=billamt-billpd;
		       if(valuefetched.intValue()>=valuetobepaid.intValue())
		       {   
		    	    valuefetched=valuefetched-valuetobepaid;
		    	    pointsgiven=(Integer)((billamt/100)*5);
		    	    valuegiven=(Integer)((pointsgiven/10));
		    	    pointfetched=pointfetched + pointsgiven;
			        valuefetched=valuefetched+valuegiven;
		    	    t.setpoints(pointfetched);
					t.setvalue(valuefetched);
					userRepository.save(t);
		    	    message="Your transaction has been completed successfully and "+ valuetobepaid +" dollars have been deducted from your wallet";
		    	   
		    	    model.addAttribute("message",message);
		    	    model.addAttribute("message1","alert alert-info");
		    	}
		       else
		       {message= "Your wallet does not have sufficient balance";
		       model.addAttribute("message",message);
		       model.addAttribute("message1","alert alert-info");
		      }	   
		      }		      
		    }
		    catch (Exception e) {
		    	
				message="Card number is not present";
				model.addAttribute("message",message);
				model.addAttribute("message1","alert alert-info");
		    }
		tts.playSound(message);
		json=createjson(model);
		return json;
		
	}
	
	@RequestMapping(path="/demo/transferview",method=RequestMethod.GET)
	public String transferview() {
	return "transferview";
	}
	
	 @RequestMapping(value="/demo/transferview")
	 @ResponseBody
	  public String updateUser(@RequestParam("pan1") String pan1,@RequestParam("pan2") String pan2,@RequestParam("amt") String amt,Model model) {
		 	json="";
		    Long pan11=Long.valueOf(pan1);
		    Long pan21=Long.valueOf(pan2);
		 	Integer valuefetched1;
			Integer valuefetched2;
			Integer valamt=Integer.valueOf(amt);
			
		try {
	    	
			t = userRepository.findBypan(pan11);
	    	valuefetched1=t.getvalue();
	    }
	    catch (Exception ex) {
	        String message="The card number " + pan1+ " does not exist";
	        model.addAttribute("message",message);
	        model.addAttribute("message1","alert alert-info");
	        tts.playSound(message);
	        json=createjson(model);
	    	return json;
	    }
        try {
	    	
			t1 = userRepository.findBypan(pan21);
	    	valuefetched2=t1.getvalue();
	    }
	    catch (Exception ex) {
	      
	      String message="The card number " + pan2+ " does not exist";
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	    }
        if(valamt<valuefetched1)
        {	
        	valuefetched1=valuefetched1-valamt;
        	t.setvalue(valuefetched1);
        	userRepository.save(t);
			valuefetched2=valuefetched2+valamt;
        	t1.setvalue(valuefetched2);
        	userRepository.save(t1);
			String message="Your account has been debited by "+ amt + " dollars" +" and the recipient's account has been credited by " + valamt+" dollars" ;
			model.addAttribute("message",message);
			 model.addAttribute("message1","alert alert-info");
			tts.playSound(message);
			json=createjson(model);
			return json;
        }
	 else
	 {
		 String message="Your account does not have sufficient balance to transfer this amount. Your current balance is " + valuefetched1 + " dollars";
		 model.addAttribute("message",message);
		 model.addAttribute("message1","alert alert-info");
		 tts.playSound(message);
		 json=createjson(model);
		 return json;
	 }
        
	 }
	 
	 @RequestMapping(path="/demo/pointsview",method=RequestMethod.GET)
	 public String pointsview() {
	 return "pointsview";
	 }


	 @RequestMapping(value="/demo/pointsview")
	 @ResponseBody
	  public String checkpoints(@RequestParam("ypan") String pan,Model model) {
		json="";
		Long pan1=Long.valueOf(pan);
	    Integer valueinwallet;
	    try {
	      Transaction t = userRepository.findBypan(pan1);
	      valueinwallet = t.getvalue();
	    }
	    catch (Exception ex) {
	      String message="User not found";
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	    }
	      String message="The total amount in your digtal wallet is : " + valueinwallet+" dollars";
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(path="/demo/addpan",method=RequestMethod.GET)
	 public String abc() {
	return "addpan";
	 }
	 
	 
	  @RequestMapping(value="/demo/addpan")
	  @ResponseBody
	  public String addnewpan(@RequestParam("pan") String pan,Model model){  
		  json="";
		  Long pan1=Long.valueOf(pan);
		  t=new Transaction(pan1,0,0);
		  userRepository.save(t);
		  String message=" ";
		  message="Your card has been successfully added to the loyalty rewards programme";
		  model.addAttribute("message",message);
		  model.addAttribute("message1","alert alert-info");
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	  }
	  
	  @RequestMapping(path="/demo/transview",method=RequestMethod.GET)
		 public String viewtrans(Model model) {
		  List<Transaction> t3=userRepository.findAll();
		  model.addAttribute("transaction",t3);
		  return "transview";
		 }
	 
	  
	  public String createjson(Model model) 
	  {
		  try
	      {
	    	  Gson gson = new Gson();
	    	  json = gson.toJson(model);
	      }
	      catch(Exception e)
	      {}
	      return json;
		  
	  }
}
